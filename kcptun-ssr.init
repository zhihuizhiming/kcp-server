#! /bin/bash
# chkconfig: 2345 55 25
# Description: Startup script for kcp-server on Debian. Place in /etc/init.d and
# run 'update-rc.d -f kcp-server defaults', or use the appropriate command on your
# distro. For CentOS/Redhat run: 'chkconfig --add kcp-server'
#=======================================================
#   System Required:  CentOS/Debian/Ubuntu (32bit/64bit)
#   Description:  Manager for kcp-server, Written by Clang
#   Author: Clang
#   Intro:  http://koolshare.cn/forum-72-1.html
#=======================================================
### BEGIN INIT INFO
# Provides:          kcp-server
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the kcp-server
# Description:       starts kcp-server using start-stop
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
runEnv="ssr"  # set "ss" or "socks5",default socks5
ProgramName="kcp-ssr"
ProgramPath="/usr/local/kcp-server"
SsrName="ssr"
NAME=kcp-ssr
BIN=${ProgramPath}/${NAME}
SSRBIN=${ProgramPath}/${SsrName}
CONFIGFILE=${ProgramPath}/server-ssr.json
LOGFILE=${ProgramPath}/${ProgramName}.log
SSRLOGFILE=${ProgramPath}/${SsrName}.log
SCRIPTNAME=/etc/init.d/${NAME}
PID_DIR=/var/run
PID_FILE=${PID_DIR}/${ProgramName}.pid
PID_FILE_SSR=${PID_DIR}/${SsrName}.pid
version="2.3"
RET_VAL=0

[ -x ${BIN} ] || exit 0
[ -x ${SSRBIN} ] || exit 0

fun_clangcn()
{
    echo ""
    echo "+--------------------------------------------------+"
    echo "|     Manager for ${NAME}, Written by Clang     |"
    echo "+--------------------------------------------------+"
    echo "|    Intro: http://koolshare.cn/forum-72-1.html    |"
    echo "+--------------------------------------------------+"
    echo ""
}
if [ ! -r ${CONFIGFILE} ]; then
    echo "config file ${CONFIGFILE} not found"
    exit 1
fi
fun_check_run(){
    PID=`ps -ef | grep -v grep | grep -i "${BIN}" | awk '{print $2}'`
    if [ ! -z $PID ]; then
        return 0
    else
        return 1
    fi
}
fun_check_ssr_run(){
    SSRPID=`ps -ef | grep -v grep | grep -i " python"|grep -i " server.py m" | awk '{print $2}'`
    if [ ! -z $SSRPID ]; then
        return 0
    else
        return 1
    fi
}
fun_start()
{
    log_flag="$1"
    if [[ "${arg1}" =~ ^[Ss][Tt][Aa][Rr][Tt]$ ]]; then
      fun_clangcn
    fi
    if [ ! -d ${PID_DIR} ]; then
        mkdir -p ${PID_DIR} || echo "failed creating PID directory ${PID_DIR}"; exit 1
    fi

    if fun_check_ssr_run; then
        echo "${SsrName} (pid $SSRPID) already running."
        if fun_check_run; then
            echo "${ProgramName} (pid $PID) already running."
            return 0
        fi
        return 0
    fi

    echo -n "Starting Ssr..."
    ${SSRBIN}
    sleep 1
    if ! fun_check_ssr_run; then
        echo "start failed"
        return 1
    fi
    echo " done"

    echo -n "Starting ${ProgramName}..."
    ${BIN} -c ${CONFIGFILE} >/dev/null  2>&1 &
    sleep 1
    if ! fun_check_run; then
        echo "start failed"
        return 1
    fi
    echo " done"
    ${BIN} -v
    echo "${SsrName} (pid $SSRPID) is running."
    echo "${ProgramName} (pid $PID)is running."
    return 0
}

fun_stop(){
    if [[ "${arg1}" =~ ^[Ss][Tt][Oo][Pp]$ ]] || [[ "${arg1}" =~ ^[Rr][Ee][Ss][Tt][Aa][Rr][Tt]$ ]]; then
      fun_clangcn
    fi
    if fun_check_run; then
        echo -n "Stoping ${ProgramName} (pid $PID)... "
        kill -9 $PID
        if [ "$?" != 0 ] ; then
            echo " failed"
            exit 1
        else
            echo " done"
        fi
    else
        echo "${ProgramName} is not running."
    fi

    if fun_check_ssr_run; then
        echo -n "Stoping ${SsrName} (pid $SSRPID)... "
        kill -9 $SSRPID
        if [ "$?" != 0 ] ; then
            echo " failed"
            exit 1
        else
            echo " done"
        fi
    else
        echo "${SsrName} is not running."
    fi
}
fun_restart(){
    fun_stop
    fun_start
}
fun_status(){
    PID=`ps -ef | grep -v grep | grep -i "${BIN}" | awk '{print $2}'`
    if [ ! -z $PID ]; then
        echo "${ProgramName} (pid $PID) is running..."
    else
        echo "${ProgramName} is stopped"
    fi
    SOCKS5PID=`ps -ef | grep -v grep | grep -i "${SOCKS5BIN}" | awk '{print $2}'`
    if [ ! -z $SOCKS5PID ]; then
        echo "${Socks5Name} (pid $SOCKS5PID) is running..."
    else
        echo "${Socks5Name} is stopped"
    fi
}
checkos(){
    if grep -Eqi "CentOS" /etc/issue || grep -Eq "CentOS" /etc/*-release; then
        OS=CentOS
    elif grep -Eqi "Debian" /etc/issue || grep -Eq "Debian" /etc/*-release; then
        OS=Debian
    elif grep -Eqi "Ubuntu" /etc/issue || grep -Eq "Ubuntu" /etc/*-release; then
        OS=Ubuntu
    else
        echo "Not support OS, Please reinstall OS and retry!"
        exit 1
    fi
}
fun_config(){
    if [ -s ${CONFIGFILE} ]; then
        vi ${CONFIGFILE}
    else
        echo "${ProgramName} configuration file not found!"
    fi
}
fun_version(){
    ${BIN} -v
}

arg1=$1
arg2=$2
[  -z ${arg1} ]
case "${arg1}" in
    start|stop|restart|status|config)
        fun_${arg1} ${arg2}
    ;;
    [vV][eE][rR][sS][iI][oO][nN]|-[vV][eE][rR][sS][iI][oO][nN]|--[vV][eE][rR][sS][iI][oO][nN]|-[vV]|--[vV])
        fun_version
    ;;
    *)
        fun_clangcn
        echo "Usage: $SCRIPTNAME {start|stop|restart|status|config|version}"
        RET_VAL=1
    ;;
esac
exit $RET_VAL
